# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base
  helper :all # include all helpers, all the time

  # See ActionController::RequestForgeryProtection for details
  # Uncomment the :secret if you're not using the cookie session store
  protect_from_forgery # :secret => '052cb93edcaaa126e814e2908a5faaed'
  
  # See ActionController::Base for details 
  # Uncomment this to filter the contents of submitted sensitive data parameters
  # from your application log (in this case, all fields with names like "password"). 
  # filter_parameter_logging :password
  
  def searchForComputersByKeyword ( searchString )
    servers = contentServerList
    computerList = Array.new
    wordarray = searchString.split(/ /)
    servers.each do |server|
      wordarray.each {|word|
        computerHash = Hash.new
        computerList = computerList + server.findComputersByUser(searchString)
        computerList = computerList + server.findComputersByName(searchString)
        computerList = computerList + server.findComputersByID(searchString)
        
        computerList.each{ |computer|
          if(computerHash[computer.remote_id])
            computerHash[computer.remote_id] = computerHash[computer.remote_id] + 1
          else 
            computerHash[computer.remote_id] = 1
          end
        }
        computerList = computerHash.sort do |a,b|
          a[1] <=> b[1]
        end
        computerList.each do |computerResult|
          computerResult[0] = SmsComputer.findOrCreate(computerResult[0], server)
        end
      }
    end
    return computerList
  end
  def searchForPackagesByKeyword ( searchString )
    servers = contentServerList
    packagesList = Array.new
    wordarray = searchString.split(/ /)
    servers.each do |server|
      packagesHash = Hash.new
      wordarray.each {|word|
        packagesList = packagesList + server.findPackagesByManufacturer(word)
        packagesList = packagesList + server.findPackagesByName(word)
        packagesList = packagesList + server.findPackagesByVersion(word)
        packagesList.each{ |package|
          if(packagesHash[package.remote_id])
            packagesHash[package.remote_id] = packagesHash[package.remote_id] + 1
          else 
            packagesHash[package.remote_id] = 1
          end
        }
        packagesList = Array.new()
      }
      packagesList = packagesHash.sort do |a,b|
        a[1] <=> b[1]
      end
      packagesList.each do |packageResult|
        packageResult[0] = SmsPackage.findOrCreate(packageResult[0], server)
      end
    end
    return packagesList
  end
  def searchForComputerGroupsByKeyword ( searchString )
    servers = contentServerList
    resultList = Array.new()
    wordarray = searchString.split(/ /)
    servers.each do |server|
      computerGroupList = Array.new
      computerGroupHash = Hash.new
      wordarray.each {|word|
        computerGroupList = computerGroupList + server.findComputerGroupsByName(word)
      
        computerGroupList.each{ |computerGroup|
          if(computerGroupHash[computerGroup.remote_id])
            computerGroupHash[computerGroup.remote_id] = computerGroupHash[computerGroup.remote_id] + 1
          else 
            computerGroupHash[computerGroup.remote_id] = 1
          end
        }
      }
      computerGroupList = computerGroupHash.sort do |a,b|
        a[1] <=> b[1]
      end
      computerGroupList.each do |computerGroupResult|
        computerGroupResult[0] = SmsComputerGroup.findOrCreate(computerGroupResult[0], server)
      end
      resultList = resultList + computerGroupList
    end
    resultList = resultList.sort do |a, b|
      a[1] <=> b[1]
    end
    return resultList
  end
  def contentServerList
    serverRecords = ContentServer.find(:all)
    serverObjects = Array.new()
    serverRecords.each do |serverRecord|
      serverObjects << serverRecord.contentServerObject
    end
    return serverObjects
  end

end
