class MainController < ApplicationController
  
  # response routines
  def index
    @tabset = get_tabset;
	  @sidebar_buttons = get_sidebar_buttons;
  end
  def search
    session[:search_string] = params[:query]
    @tabset = get_tabset;
    @sidebar_buttons = get_sidebar_buttons;
    @sidebar_items = perform_search(session[:search_string], @sidebar_buttons)
    puts "I found " + @sidebar_items.size.to_s + " items of content"
    update_page do |page|
      page.redraw_item_list
    end
  end
  def open_content
    content_type = (params[:type]).camelize.constantize;
    server = ContentServer.find(params[:server_id]).contentServerObject;
    content = (params[:id]) ? content_type.findOrCreate(params[:id], server) : content_type.new();
    get_tabset.open_and_activate(content);
    @tabset = get_tabset;
    update_page do |page|
      page.redraw_tabset;
    end
  end
  def select_tab
    @tabset = get_tabset;
    @tabset.active_tab=(Tab.find(params[:id]));
    @tabset.save;
    update_page do |page|
      page.redraw_tabset;
    end
  end
  def add_package_to_group
    groupToAddTo = SmsComputerGroup.find_by_remote_id(params[:computer_group_id])
    packageToAdd = SmsPackage.find_by_remote_id(params[:package_id])
    taskToAdd = params[:task_name]
    advertisement_name = "109_" + Time.now.gmtime.strftime("%m%d%Y%H%M%S") + "_PKG" + packageToAdd.remote_id
    packageTasks = packageToAdd.tasks
    puts packageTasks.size.to_s + "tasks to choose from"
    
    if(taskToAdd)
      taskToExecute=nil
      packageTasks.each do |packageTask|
        taskToExecute = packageTask if packageTask.name = taskToAdd
      end
      if taskToExecute
        groupToAddTo.executeTask(taskToExecute, advertisement_name)
        @successString = "Advertisement Created : " + advertisement_name
      else
        @errorString = "ERROR : An invalid task was entered" 
      end
    else
      if packageTasks.size == 1
        groupToAddTo.executeTask(packageToAdd.tasks.first, advertisement_name)
        @successString = "Advertisement Created : " + advertisement_name
      else
        @tasksToChoose = packageTasks
      end
    end
    @group_id = groupToAddTo.remote_id
    @package_id = packageToAdd.remote_id
    @tabset = get_tabset;
    
    update_page do |page|
      page.hide_spinner
      if (@successString)
        page.redraw_active_tab
        page.set_redbox('add_package_to_group_success')
      elsif (@errorString)
        page.set_redbox('add_package_to_group_error')
      else
        page.set_redbox('add_package_to_group')
      end
    end
  end
  def add_computer_to_group
    puts "Group ID is " + params[:computer_group_id]
    puts "Computer ID is " + params[:computer_id]
    groupToAddTo = SmsComputerGroup.find_by_remote_id(params[:computer_group_id])
    computerToAdd = SmsComputer.find_by_remote_id(params[:computer_id])
    groupToAddTo.addComputer(computerToAdd)
    @tabset = get_tabset;
    update_page do |page| 
      page.redraw_active_tab
    end
  end
  def create_computer_group
    name = params[:computer_group_name]
    if(params[:server_id])
      server = ContentServer.find(params[:server_id]).contentServerObject
    end
    parentGroup = SmsComputerGroup.find_by_name("Distribution")
    
    if(server && name)
      newGroup = server.createComputerGroup(name, parentGroup, "ugignja")
      newGroup.save
      get_tabset.open_and_activate(newGroup);
      @tabset = get_tabset;
      @sidebar_buttons = get_sidebar_buttons;
      @sidebar_items = perform_search(session[:search_string], @sidebar_buttons)
      update_page do |page|
        page.redraw_tabset
        page.redraw_item_list
        page.close_redbox
      end
    else
      update_page do |page|
        page.set_redbox('new_computer_group_form')
      end
    end
  end
  def delete_computer_from_group
    computer_id = params[:computer_id]
    group_id = params[:group_id]
    group = SmsComputerGroup.find(group_id)
    group.removeComputer(computer_id)
    @tabset = get_tabset;
    update_page do |page| 
      page.redraw_active_tab
    end
  end
  def delete_package_deployment
    deploymentToDelete = SmsPackageDeployment.find(params[:package_deployment_id])
    deploymentToDelete.delete
    @tabset = get_tabset;
    update_page do |page| 
      page.redraw_active_tab
    end
  end
  def delete_content_from_sidebar
    
    refresh_tabs = false
    content_type = (params[:type]).camelize.constantize;
    content_to_delete = content_type.find(params[:id]);
    if(tab_to_delete = get_tabset.find_open_tab_for_content(content_to_delete))
      puts "I'm going to delete " + tab_to_delete.id.to_s
      tab_to_delete.destroy
      refresh_tabs = true
    end
    puts "Deleting the content, now"
    content_to_delete.destroy
    
    @tabset = get_tabset
    @sidebar_buttons = get_sidebar_buttons;
    @sidebar_items = perform_search(session[:search_string], @sidebar_buttons)

    update_page do |page|
      page.redraw_tabset if refresh_tabs
      page.redraw_item_list
    end
  end
  def close_tab
    tab = Tab.find(params[:id]);
    tab.delete;
    @tabset = get_tabset;
    update_page do |page|
      page.redraw_tabset
    end
  end
  
  private
  
  # redraw routines
  def update_page
    render :update do |page|
      
      def page.redraw_tabset
          page.replace_html 'contentwrapper', :partial => 'content_pane'  
        end
      def page.redraw_active_tab
          
          page.replace_html 'current_tab', :partial => 'current_tab'
        end
      def page.redraw_item_list
          page.replace_html 'content_list', :partial => 'item_list'
        end
      def page.set_redbox(redbox_partial)
        page << "RedBox.showInline('hidden_content_alert')"
        page.replace_html "hidden_content_alert", :partial => redbox_partial
        end
      def page.close_redbox
        page << "RedBox.close()"
      end
      def page.hide_spinner
          page << "$('spinner').hide();"
        end
      
      yield(page)
    end
  end
  
  # Session Variable Management
  def perform_search (search_field, sidebar_buttons)
    foundset = Array.new;
    if (search_field)
      if(sidebar_buttons["Packages"])
        foundset = foundset + searchForPackagesByKeyword(search_field)
      end
      if(sidebar_buttons["Computers"])
        foundset = foundset + searchForComputersByKeyword(search_field)
      end
      if(sidebar_buttons["Groups"] || true)
          foundset = foundset + searchForComputerGroupsByKeyword(search_field)
      end
      #if(sidebar_buttons["Users"])
      #  foundset = foundset + User.find(:all)
      #end
      #if(sidebar_buttons["Departments"])
      #  foundset = foundset + Department.find(:all)
      #end
    end if
    foundset.sort do |a, b|
      b[1] <=> a[1]
    end
    foundset.each_index do |x|
      foundset[x] = foundset[x][0]
    end
    return foundset;
  end
  def get_tabset
    unless (session[:tabset_id])
      session[:tabset_id] = Tabset.create.id;
    end
    return Tabset.find(session[:tabset_id]);
  end
  def get_sidebar_buttons
  	if (session[:sidebar_buttons])
  		return session[:sidebar_buttons]
  	else
  		return session[:sidebar_buttons] = Hash["Packages"		=>	true, 
  												                    "Computers"		=>	true,
  												                    "Users"			=>	true,
  												                    "Departments"	=>	false];
  	end
  end

end
